name: Test R Package Installation

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
jobs:
  test-r-packages:
    runs-on: windows-2022 
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    
    # Check out R-Instat code
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0        

    # Extract R version from clsRLink.vb
    - name: Extract R version from clsRLink.vb
      id: get-r-version
      run: |
        $content = Get-Content "instat\clsRLink.vb"
        $versionLine = $content | Where-Object { $_ -match 'Private strRBundledVersion As String = "(.+)"' }
        if ($versionLine) {
          $rVersion = [regex]::Match($versionLine, 'Private strRBundledVersion As String = "(.+)"').Groups[1].Value
          Write-Host "Found R version: $rVersion"
          echo "r-version=$rVersion" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "Could not find R version, using default"
          echo "r-version=4.4.1" >> $env:GITHUB_OUTPUT
        }
      shell: powershell
     
    # Install R using the extracted version
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ steps.get-r-version.outputs.r-version }}

        
    # Set up R-tools for package compilation
    - name: Set R-tools
      uses: r-windows/install-rtools@master 

    # Test R package installation using the install_packages.R script
    - name: Test R packages installation
      run: |
        Write-Host "Testing R package installation..."
        $R_HOME=$(Rscript -e 'cat(R.home())')
        Write-Host "Using R from: $R_HOME"
        
        # Convert paths to forward slashes for R script
        $installScript = "instat/static/InstatObject/R/install_packages.R"
        Write-Host "Install script path: $installScript"
        
        # Run the install_packages.R script and capture output
        Write-Host "Running package installation (this may take several minutes)..."
        
        # Use Start-Process to better handle output and errors
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = "$R_HOME\bin\Rscript.exe"
        $psi.Arguments = "`"$installScript`""
        $psi.UseShellExecute = $false
        $psi.RedirectStandardOutput = $true
        $psi.RedirectStandardError = $true
        $psi.CreateNoWindow = $true
        
        $process = New-Object System.Diagnostics.Process
        $process.StartInfo = $psi
        
        $outputData = @()
        $errorData = @()
        
        # Event handlers to capture output
        $outputAction = {
            if ($Event.SourceEventArgs.Data) {
                $script:outputData += $Event.SourceEventArgs.Data
            }
        }
        
        $errorAction = {
            if ($Event.SourceEventArgs.Data) {
                $script:errorData += $Event.SourceEventArgs.Data
            }
        }
        
        Register-ObjectEvent -InputObject $process -EventName OutputDataReceived -Action $outputAction | Out-Null
        Register-ObjectEvent -InputObject $process -EventName ErrorDataReceived -Action $errorAction | Out-Null
        
        $process.Start() | Out-Null
        $process.BeginOutputReadLine()
        $process.BeginErrorReadLine()
        $process.WaitForExit()
        
        $exitCode = $process.ExitCode
        
        # Combine all output for analysis
        $allOutput = $outputData + $errorData
        
        # Save output to file for next step
        $allOutput | Out-File -FilePath "package_install_output.txt" -Encoding UTF8
        
        # Show progress during installation
        $packageCount = 0
        foreach ($line in $allOutput) {
          if ($line -and ($line -match "^\* installing \*source\* package" -or $line -match "package.*successfully unpacked")) {
            $packageCount++
            if ($packageCount % 10 -eq 0) {
              Write-Host "Processed $packageCount packages..." 
            }
          }
        }
        
        Write-Host "Package installation process completed with exit code: $exitCode"
        Write-Host "Total output lines captured: $($allOutput.Count)"
        
        # Always continue to next step for analysis, even if there were issues
        echo "exit-code=$exitCode" >> $env:GITHUB_OUTPUT
      shell: powershell

    # Analyze installation results and report errors/warnings
    - name: Analyze installation results
      run: |
        Write-Host "Analyzing package installation results..."
        
        # Read the output from the previous step
        if (Test-Path "package_install_output.txt") {
          $allOutput = Get-Content "package_install_output.txt" -Encoding UTF8
        } else {
          Write-Host "❌ No output file found from installation step"
          exit 1
        }
        
        # Filter output for errors and warnings
        $errors = @()
        $warnings = @()
        $currentPackage = ""
        $installedPackages = @()
        
        foreach ($line in $allOutput) {
          if ($line) {
            # Track current package being installed
            if ($line -match "^\* installing \*source\* package '(.+?)'") {
              $currentPackage = $matches[1]
              $installedPackages += $currentPackage
            } elseif ($line -match "package '(.+?)' successfully unpacked") {
              $currentPackage = $matches[1]
              $installedPackages += $currentPackage
            }
            
            # Capture actual errors (not normal R messages)
            if ($line -match "ERROR:|Error in|Error:|compilation failed|installation failed|fatal error|non-zero exit status" -and $line -notmatch "Warning") {
              $errors += "[$currentPackage] $line"
            }
            
            # Capture warnings
            if ($line -match "Warning:|WARNING:" -and $line -notmatch "Error") {
              $warnings += "[$currentPackage] $line"
            }
          }
        }
        
        # Display summary
        Write-Host "`n=== PACKAGE INSTALLATION ANALYSIS ==="
        Write-Host "Packages processed: $($installedPackages.Count)"
        
        if ($errors.Count -gt 0) {
          Write-Host "`n❌ ERRORS FOUND ($($errors.Count)):"
          Write-Host "================================"
          foreach ($error in $errors) {
            Write-Host $error
          }
        } else {
          Write-Host "`n✅ No errors found during package installation"
        }
        
        if ($warnings.Count -gt 0) {
          Write-Host "`n⚠️ WARNINGS FOUND ($($warnings.Count)):"
          Write-Host "===================================="
          foreach ($warning in $warnings) {
            Write-Host $warning
          }
        } else {
          Write-Host "`n✅ No warnings found during package installation"
        }
        
        Write-Host "`n=== END ANALYSIS ==="
        
        # Fail this step if there were any errors
        if ($errors.Count -gt 0) {
          Write-Host "`n❌ Package installation failed due to $($errors.Count) error(s)"
          exit 1
        } else {
          Write-Host "`n✅ Package installation analysis passed - no errors detected!"
        }
      shell: powershell



