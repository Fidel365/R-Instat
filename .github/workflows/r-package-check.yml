name: Test R Package Installation

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
jobs:
  test-r-packages:
    runs-on: windows-2022 
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    
    # Check out R-Instat code
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0        

    # Extract R version from clsRLink.vb
    - name: Extract R version from clsRLink.vb
      id: get-r-version
      run: |
        $content = Get-Content "instat\clsRLink.vb"
        $versionLine = $content | Where-Object { $_ -match 'Private strRBundledVersion As String = "(.+)"' }
        if ($versionLine) {
          $rVersion = [regex]::Match($versionLine, 'Private strRBundledVersion As String = "(.+)"').Groups[1].Value
          Write-Host "Found R version: $rVersion"
          echo "r-version=$rVersion" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "Could not find R version, using default"
          echo "r-version=4.4.1" >> $env:GITHUB_OUTPUT
        }
      shell: powershell
     
    # Install R using the extracted version
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ steps.get-r-version.outputs.r-version }}

        
    # Set up R-tools for package compilation
    - name: Set R-tools
      uses: r-windows/install-rtools@master 

    # Test R package installation using the install_packages.R script
    - name: Test R packages installation
      run: |
        Write-Host "Testing R package installation..."
        $R_HOME = $(Rscript -e 'cat(R.home())')
        Write-Host "Using R from: $R_HOME"
        
        $installScript = "${{ github.workspace }}\instat\static\InstatObject\R\install_packages.R"
        Write-Host "Install script path: $installScript"
        
        Write-Host "Running package installation (this may take several minutes)..."
        
        # Run R script and capture output using Start-Process
        $outputFile = "package_install_output.txt"
        $process = Start-Process -FilePath "$R_HOME\bin\Rscript.exe" -ArgumentList "`"$installScript`"" -RedirectStandardOutput $outputFile -RedirectStandardError $outputFile -Wait -PassThru -NoNewWindow
        
        $exitCode = $process.ExitCode
        Write-Host "Package installation completed with exit code: $exitCode"
        
        # Show basic stats and some output
        if (Test-Path $outputFile) {
          $allLines = Get-Content $outputFile -ErrorAction SilentlyContinue
          $lineCount = $allLines.Count
          Write-Host "Output captured: $lineCount lines"
          
          # Show last few lines as progress indication
          if ($lineCount -gt 0) {
            Write-Host "Last few lines of output:"
            $allLines | Select-Object -Last 5 | ForEach-Object { Write-Host "  $_" }
          }
        } else {
          Write-Host "Warning: No output file created"
        }
        
        echo "exit-code=$exitCode" >> $env:GITHUB_OUTPUT
      shell: powershell

    # Analyze installation results and report errors/warnings
    - name: Analyze installation results
      run: |
        Write-Host "Analyzing package installation results..."
        
        # Read the output file
        $outputFile = "package_install_output.txt"
        if (Test-Path $outputFile) {
          $allOutput = Get-Content $outputFile -Encoding UTF8
          Write-Host "Found output file with $($allOutput.Count) lines"
        } else {
          Write-Host "❌ No output file found from installation step"
          exit 1
        }
        
        # Filter for errors and warnings
        $errors = @()
        $warnings = @()
        $currentPackage = ""
        $packageCount = 0
        
        foreach ($line in $allOutput) {
          if ($line) {
            # Track packages being installed
            if ($line -match "^\* installing \*source\* package '(.+?)'") {
              $currentPackage = $matches[1]
              $packageCount++
            } elseif ($line -match "Installing package into") {
              Write-Host "." -NoNewline  # Progress indicator
            }
            
            # Capture errors
            if ($line -match "ERROR:|Error in|Error:|compilation failed|installation failed|fatal error|non-zero exit status" -and $line -notmatch "Warning") {
              $errors += "[$currentPackage] $line"
            }
            
            # Capture warnings  
            if ($line -match "Warning:|WARNING:" -and $line -notmatch "Error") {
              $warnings += "[$currentPackage] $line"
            }
          }
        }
        
        Write-Host "`n"  # New line after progress dots
        
        # Display results
        Write-Host "=== PACKAGE INSTALLATION ANALYSIS ==="
        Write-Host "Packages processed: $packageCount"
        
        if ($errors.Count -gt 0) {
          Write-Host "`n❌ ERRORS FOUND ($($errors.Count)):"
          Write-Host "================================"
          foreach ($error in $errors) {
            Write-Host $error
          }
        } else {
          Write-Host "`n✅ No errors found"
        }
        
        if ($warnings.Count -gt 0) {
          Write-Host "`n⚠️ WARNINGS FOUND ($($warnings.Count)):"
          Write-Host "===================================="
          foreach ($warning in $warnings) {
            Write-Host $warning
          }
        } else {
          Write-Host "`n✅ No warnings found"
        }
        
        Write-Host "`n=== END ANALYSIS ==="
        
        # Fail if there were errors
        if ($errors.Count -gt 0) {
          Write-Host "`n❌ Package installation failed due to $($errors.Count) error(s)"
          exit 1
        } else {
          Write-Host "`n✅ Package installation analysis passed!"
        }
      shell: powershell



