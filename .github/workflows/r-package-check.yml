name: Test R Package Installation

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
jobs:
  test-r-packages:
    runs-on: windows-2022 
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    
    # Check out R-Instat code
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0        

    # Extract R version from clsRLink.vb
    - name: Extract R version from clsRLink.vb
      id: get-r-version
      run: |
        $content = Get-Content "instat\clsRLink.vb"
        $versionLine = $content | Where-Object { $_ -match 'Private strRBundledVersion As String = "(.+)"' }
        if ($versionLine) {
          $rVersion = [regex]::Match($versionLine, 'Private strRBundledVersion As String = "(.+)"').Groups[1].Value
          Write-Host "Found R version: $rVersion"
          echo "r-version=$rVersion" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "Could not find R version, using default"
          echo "r-version=4.4.1" >> $env:GITHUB_OUTPUT
        }
      shell: powershell
     
    # Install R using the extracted version
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ steps.get-r-version.outputs.r-version }}

    # Set up R-tools for package compilation
    - name: Set R-tools
      uses: r-windows/install-rtools@master 

    # Create directory structure needed for R installation test
    - name: Create necessary directories
      run: |
        New-Item -ItemType Directory -Force -Path "instat\bin\x64\Release\static\R\bin"

    # Copy R installation to the expected location for testing
    - name: Copy R installation
      run: |
        $R_HOME=$(Rscript -e 'cat(R.home())')
        Write-Host "R_HOME path: $R_HOME"
        ROBOCOPY "$R_HOME" "instat\bin\x64\Release\static\R" /E
      continue-on-error: true  

    # Test R package installation using the install_packages.R script
    - name: Test R packages installation
      run: |
        Write-Host "Testing R package installation..."
        $R_HOME=$(Rscript -e 'cat(R.home())')
        Write-Host "Using R from: $R_HOME"
        
        # Convert paths to forward slashes for R script
        $installScript = "instat/static/InstatObject/R/install_packages.R"
        Write-Host "Install script path: $installScript"
        
        # Run the install_packages.R script and capture output
        Write-Host "Running package installation (this may take several minutes)..."
        $output = & "$R_HOME\bin\Rscript.exe" "$installScript" 2>&1
        
        # Filter output for errors and warnings
        $errors = @()
        $warnings = @()
        $currentPackage = ""
        
        foreach ($line in $output) {
          $lineStr = $line.ToString()
          
          # Track current package being installed
          if ($lineStr -match "Installing package into") {
            $currentPackage = ($lineStr -split "Installing package into")[0].Trim()
          } elseif ($lineStr -match "package '(.+?)' successfully unpacked") {
            $currentPackage = $matches[1]
          }
          
          # Capture errors
          if ($lineStr -match "ERROR|Error|error:|FAILED|Failed|failed:" -and $lineStr -notmatch "Warning") {
            $errors += "[$currentPackage] $lineStr"
          }
          
          # Capture warnings
          if ($lineStr -match "WARNING|Warning|warning:" -and $lineStr -notmatch "Error") {
            $warnings += "[$currentPackage] $lineStr"
          }
        }
        
        # Display summary
        Write-Host "`n=== PACKAGE INSTALLATION SUMMARY ==="
        
        if ($errors.Count -gt 0) {
          Write-Host "`n❌ ERRORS FOUND ($($errors.Count)):"
          Write-Host "================================"
          foreach ($error in $errors) {
            Write-Host $error
          }
        } else {
          Write-Host "`n✅ No errors found during package installation"
        }
        
        if ($warnings.Count -gt 0) {
          Write-Host "`n⚠️ WARNINGS FOUND ($($warnings.Count)):"
          Write-Host "===================================="
          foreach ($warning in $warnings) {
            Write-Host $warning
          }
        } else {
          Write-Host "`n✅ No warnings found during package installation"
        }
        
        Write-Host "`n=== END SUMMARY ==="
        
        if ($LASTEXITCODE -ne 0) {
          Write-Host "`n❌ R package installation failed with exit code: $LASTEXITCODE"
          exit 1
        } else {
          Write-Host "`n✅ R package installation completed successfully!"
        }
      shell: powershell



