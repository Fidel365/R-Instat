name: Test R Package Installation

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
jobs:
  test-r-packages:
    runs-on: windows-2022 
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
    
    # Check out R-Instat code
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0        

    # Extract R version from clsRLink.vb
    - name: Extract R version from clsRLink.vb
      id: get-r-version
      run: |
        $content = Get-Content "instat\clsRLink.vb"
        $versionLine = $content | Where-Object { $_ -match 'Private strRBundledVersion As String = "(.+)"' }
        if ($versionLine) {
          $rVersion = [regex]::Match($versionLine, 'Private strRBundledVersion As String = "(.+)"').Groups[1].Value
          Write-Host "Found R version: $rVersion"
          echo "r-version=$rVersion" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "Could not find R version, using default"
          echo "r-version=4.4.1" >> $env:GITHUB_OUTPUT
        }
      shell: powershell
     
    # Install R using the extracted version
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ steps.get-r-version.outputs.r-version }}

    # Set up R-tools for package compilation
    - name: Set R-tools
      uses: r-windows/install-rtools@master 

    # Create directory structure needed for R installation test
    - name: Create necessary directories
      run: |
        New-Item -ItemType Directory -Force -Path "instat\bin\x64\Release\static\R\bin"

    # Copy R installation to the expected location for testing
    - name: Copy R installation
      run: |
        $R_HOME=$(Rscript -e 'cat(R.home())')
        Write-Host "R_HOME path: $R_HOME"
        ROBOCOPY "$R_HOME" "instat\bin\x64\Release\static\R" /E
      continue-on-error: true  

    # Test R package installation using the install_packages.R script
    - name: Test R packages installation
      run: |
        Write-Host "Testing R package installation..."
        $R_HOME=$(Rscript -e 'cat(R.home())')
        Write-Host "Using R from: $R_HOME"
        
        # Run the install_packages.R script
        & "$R_HOME\bin\Rscript.exe" "instat\static\InstatObject\R\install_packages.R"
        
        if ($LASTEXITCODE -ne 0) {
          Write-Host "R package installation failed with exit code: $LASTEXITCODE"
          exit 1
        } else {
          Write-Host "R package installation completed successfully!"
        }
      shell: powershell

    # Verify critical packages are installed
    - name: Verify package installation
      run: |
        Write-Host "Verifying critical packages are installed..."
        $R_HOME=$(Rscript -e 'cat(R.home())')
        
        # Check for some key packages that R-Instat depends on
        $critical_packages = @("ggplot2", "dplyr", "lubridate", "openxlsx", "reshape2")
        $failed_packages = @()
        
        foreach ($package in $critical_packages) {
          $result = & "$R_HOME\bin\Rscript.exe" -e "if (!require('$package', quietly=TRUE)) quit(status=1)"
          if ($LASTEXITCODE -ne 0) {
            $failed_packages += $package
            Write-Host "Package '$package' is not properly installed"
          } else {
            Write-Host "Package '$package' is installed and loadable"
          }
        }
        
        if ($failed_packages.Count -gt 0) {
          Write-Host "The following critical packages failed to install: $($failed_packages -join ', ')"
          exit 1
        } else {
          Write-Host "All critical packages are properly installed!"
        }
      shell: powershell

    # Generate summary report
    - name: Generate installation summary
      run: |
        Write-Host "Generating package installation summary..."
        $R_HOME=$(Rscript -e 'cat(R.home())')
        
        & "$R_HOME\bin\Rscript.exe" -e "
        ip <- installed.packages()[, c('Package', 'Version')]
        cat('Total packages installed:', nrow(ip), '\n')
        cat('R version:', R.version.string, '\n')
        cat('Platform:', R.version\$platform, '\n')
        "
      shell: powershell